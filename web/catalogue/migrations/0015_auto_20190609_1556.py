# Generated by Django 2.1.8 on 2019-06-09 14:56

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import oscar.core.validators
import oscar.models.fields
import oscar.models.fields.autoslugfield
import oscar.models.fields.slugfield


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0014_tshirtproductclass'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShirtAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.SlugField(max_length=128, validators=[django.core.validators.RegexValidator(message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.", regex='^[a-zA-Z_][0-9a-zA-Z_]*$'), oscar.core.validators.non_python_keyword], verbose_name='Code')),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('type', models.CharField(max_length=20, verbose_name='text')),
                ('option_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.AttributeOptionGroup')),
            ],
            options={
                'verbose_name': 'Product attribute',
                'verbose_name_plural': 'Product attributes',
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShirtCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('image', models.ImageField(blank=True, max_length=255, null=True, upload_to='categories', verbose_name='Image')),
                ('slug', oscar.models.fields.slugfield.SlugField(max_length=255, verbose_name='Slug')),
                ('name', models.CharField(max_length=200, verbose_name='shirt')),
                ('description', models.TextField(verbose_name='shirt_desc')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['path'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShirtOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('code', oscar.models.fields.autoslugfield.AutoSlugField(blank=True, editable=False, max_length=128, populate_from='name', unique=True, verbose_name='Code')),
                ('type', models.CharField(choices=[('Required', 'Required - a value for this option must be specified'), ('Optional', 'Optional - a value for this option can be omitted')], default='Required', max_length=128, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShirtProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upc', oscar.models.fields.NullCharField(help_text='Universal Product Code (UPC) is an identifier for a product which is not specific to a particular  supplier. Eg an ISBN for a book.', max_length=64, unique=True, verbose_name='UPC')),
                ('rating', models.FloatField(editable=False, null=True, verbose_name='Rating')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('is_discountable', models.BooleanField(default=True, help_text='This flag indicates if this product can be used in an offer or not', verbose_name='Is discountable?')),
                ('structure', models.CharField(max_length=10, verbose_name='standalone')),
                ('slug', models.SlugField(max_length=255, verbose_name='t-shirts')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('date_updated', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Date updated')),
                ('attributes', models.ManyToManyField(to='catalogue.ShirtAttribute')),
                ('categories', models.ManyToManyField(to='catalogue.ShirtCategory')),
                ('parent', models.ForeignKey(blank=True, help_text="Only choose a parent product if you're creating a child product.  For example if this is a size 4 of a particular t-shirt.  Leave blank if this is a stand-alone product (i.e. there is only one version of this product).", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='catalogue.ShirtProduct', verbose_name='Parent product')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-date_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShirtRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ranking', models.PositiveSmallIntegerField(default=0, help_text='Determines order of the products. A product with a higher value will appear before one with a lower ranking.', verbose_name='Ranking')),
                ('primary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_recommendations', to='catalogue.ShirtProduct')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.ShirtProduct')),
            ],
            options={
                'verbose_name': 'Product recommendation',
                'verbose_name_plural': 'Product recomendations',
                'ordering': ['primary', '-ranking'],
                'abstract': False,
            },
        ),
        migrations.RenameModel(
            old_name='TShirtProductClass',
            new_name='ShirtProductClass',
        ),
        migrations.AddField(
            model_name='shirtproduct',
            name='product_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', to='catalogue.ShirtProductClass', verbose_name='product type'),
        ),
        migrations.AddField(
            model_name='shirtproduct',
            name='product_options',
            field=models.ManyToManyField(blank=True, to='catalogue.ShirtOption'),
        ),
        migrations.AddField(
            model_name='shirtproduct',
            name='recommended_products',
            field=models.ManyToManyField(to='catalogue.ShirtProduct'),
        ),
        migrations.AddField(
            model_name='shirtattribute',
            name='product_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogue.ShirtProductClass'),
        ),
        migrations.AlterUniqueTogether(
            name='shirtrecommendation',
            unique_together={('primary', 'recommendation')},
        ),
    ]
